Terminals which are not used

   ROOT
   TOK_BOOL
   TOK_CHAR
   TOK_ROOT
   TOK_BLOCK
   TOK_PARAMLIST
   TOK_DECLID
   TOK_FUNCTION
   TOK_TYPEID
   TOK_FIELD
   TOK_VARDECL
   TOK_IFELSE
   TOK_RETURNVOID
   TOK_NEWSTRING
   TOK_NEWARRAY
   TOK_INDEX
   TOK_PROTOTYPE
   TOK_CALL
   '%'
   NEG
   POS


State 16 conflicts: 1 shift/reduce
State 28 conflicts: 24 shift/reduce
State 90 conflicts: 14 shift/reduce
State 114 conflicts: 14 shift/reduce
State 123 conflicts: 27 reduce/reduce
State 125 conflicts: 27 reduce/reduce
State 129 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: program structdef
    2        | program function
    3        | program statement
    4        | program error '}'
    5        | program error ';'
    6        | /* empty */

    7 structdef: structcont '}'

    8 structcont: structcont fielddecl ';'
    9           | TOK_STRUCT TOK_IDENT '{'

   10 fielddecl: basetype TOK_IDENT
   11          | basetype TOK_ARRAY TOK_IDENT

   12 basetype: TOK_VOID
   13         | TOK_INT
   14         | TOK_STRING
   15         | TOK_IDENT

   16 function: identdecl funcargs ')' block
   17         | identdecl funcargs ')' ';'
   18         | identdecl '(' ')' block
   19         | identdecl '(' ')' ';'

   20 funcargs: funcargs ',' identdecl
   21         | '(' identdecl

   22 identdecl: basetype TOK_IDENT
   23          | basetype TOK_ARRAY TOK_IDENT

   24 block: blockbody '}'
   25      | ';'

   26 blockbody: blockbody statement
   27          | '{' statement
   28          | '{'

   29 statement: block
   30          | vardecl
   31          | while
   32          | ifelse
   33          | return
   34          | expr ';'

   35 vardecl: identdecl '=' expr ';'

   36 while: TOK_WHILE '(' expr ')' statement

   37 ifelse: TOK_IF '(' expr ')' statement
   38       | TOK_IF '(' expr ')' statement TOK_ELSE statement

   39 return: TOK_RETURN expr ';'
   40       | TOK_RETURN ';'

   41 expr: expr binop expr
   42     | unop expr
   43     | allocator
   44     | call
   45     | '(' expr ')'
   46     | variable
   47     | constant
   48     | IDENT
   49     | NUMBER

   50 binop: TOK_EQ
   51      | TOK_NE
   52      | TOK_LT
   53      | TOK_LE
   54      | TOK_GT
   55      | TOK_GE
   56      | '+'
   57      | '-'
   58      | '*'
   59      | '/'
   60      | '='
   61      | '^'

   62 unop: TOK_POS
   63     | TOK_NEG
   64     | '!'
   65     | TOK_NEW
   66     | TOK_ORD
   67     | TOK_CHR

   68 variable: TOK_IDENT
   69         | expr '[' expr ']'
   70         | expr '.' TOK_IDENT

   71 constant: TOK_INTCON
   72         | TOK_CHARCON
   73         | TOK_STRINGCON
   74         | TOK_FALSE
   75         | TOK_TRUE
   76         | TOK_NULL

   77 allocator: TOK_NEW TOK_IDENT '(' ')'
   78          | TOK_NEW TOK_STRING '(' expr ')'
   79          | TOK_NEW basetype '[' expr ']'

   80 call: TOK_IDENT '(' ')'
   81     | exprs ')'

   82 exprs: TOK_IDENT '(' expr
   83      | exprs ',' expr


Terminals, with rules where they appear

$end (0) 0
'!' (33) 64
'%' (37)
'(' (40) 18 19 21 36 37 38 45 77 78 80 82
')' (41) 16 17 18 19 36 37 38 45 77 78 80 81
'*' (42) 58
'+' (43) 56
',' (44) 20 83
'-' (45) 57
'.' (46) 70
'/' (47) 59
';' (59) 5 8 17 19 25 34 35 39 40
'=' (61) 35 60
'[' (91) 69 79
']' (93) 69 79
'^' (94) 61
'{' (123) 9 27 28
'}' (125) 4 7 24
error (256) 4 5
ROOT (258)
IDENT (259) 48
NUMBER (260) 49
TOK_VOID (261) 12
TOK_BOOL (262)
TOK_CHAR (263)
TOK_INT (264) 13
TOK_STRING (265) 14 78
TOK_IF (266) 37 38
TOK_ELSE (267) 38
TOK_WHILE (268) 36
TOK_RETURN (269) 39 40
TOK_STRUCT (270) 9
TOK_FALSE (271) 74
TOK_TRUE (272) 75
TOK_NULL (273) 76
TOK_NEW (274) 65 77 78 79
TOK_ORD (275) 66
TOK_CHR (276) 67
TOK_EQ (277) 50
TOK_NE (278) 51
TOK_LE (279) 53
TOK_GE (280) 55
TOK_ARRAY (281) 11 23
TOK_IDENT (282) 9 10 11 15 22 23 68 70 77 80 82
TOK_INTCON (283) 71
TOK_CHARCON (284) 72
TOK_STRINGCON (285) 73
TOK_ROOT (286)
TOK_BLOCK (287)
TOK_PARAMLIST (288)
TOK_DECLID (289)
TOK_FUNCTION (290)
TOK_TYPEID (291)
TOK_FIELD (292)
TOK_VARDECL (293)
TOK_IFELSE (294)
TOK_RETURNVOID (295)
TOK_NEWSTRING (296)
TOK_NEWARRAY (297)
TOK_INDEX (298)
TOK_PROTOTYPE (299)
TOK_CALL (300)
TOK_POS (301) 62
TOK_NEG (302) 63
TOK_GT (303) 54
TOK_LT (304) 52
NEG (305)
POS (306)


Nonterminals, with rules where they appear

$accept (69)
    on left: 0
program (70)
    on left: 1 2 3 4 5 6, on right: 0 1 2 3 4 5
structdef (71)
    on left: 7, on right: 1
structcont (72)
    on left: 8 9, on right: 7 8
fielddecl (73)
    on left: 10 11, on right: 8
basetype (74)
    on left: 12 13 14 15, on right: 10 11 22 23 79
function (75)
    on left: 16 17 18 19, on right: 2
funcargs (76)
    on left: 20 21, on right: 16 17 20
identdecl (77)
    on left: 22 23, on right: 16 17 18 19 20 21 35
block (78)
    on left: 24 25, on right: 16 18 29
blockbody (79)
    on left: 26 27 28, on right: 24 26
statement (80)
    on left: 29 30 31 32 33 34, on right: 3 26 27 36 37 38
vardecl (81)
    on left: 35, on right: 30
while (82)
    on left: 36, on right: 31
ifelse (83)
    on left: 37 38, on right: 32
return (84)
    on left: 39 40, on right: 33
expr (85)
    on left: 41 42 43 44 45 46 47 48 49, on right: 34 35 36 37 38 39
    41 42 45 69 70 78 79 82 83
binop (86)
    on left: 50 51 52 53 54 55 56 57 58 59 60 61, on right: 41
unop (87)
    on left: 62 63 64 65 66 67, on right: 42
variable (88)
    on left: 68 69 70, on right: 46
constant (89)
    on left: 71 72 73 74 75 76, on right: 47
allocator (90)
    on left: 77 78 79, on right: 43
call (91)
    on left: 80 81, on right: 44
exprs (92)
    on left: 82 83, on right: 81 83


state 0

    0 $accept: . program $end

    $default  reduce using rule 6 (program)

    program  go to state 1


state 1

    0 $accept: program . $end
    1 program: program . structdef
    2        | program . function
    3        | program . statement
    4        | program . error '}'
    5        | program . error ';'

    $end           shift, and go to state 2
    error          shift, and go to state 3
    IDENT          shift, and go to state 4
    NUMBER         shift, and go to state 5
    TOK_VOID       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_STRUCT     shift, and go to state 12
    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_ORD        shift, and go to state 17
    TOK_CHR        shift, and go to state 18
    TOK_IDENT      shift, and go to state 19
    TOK_INTCON     shift, and go to state 20
    TOK_CHARCON    shift, and go to state 21
    TOK_STRINGCON  shift, and go to state 22
    TOK_POS        shift, and go to state 23
    TOK_NEG        shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26
    ';'            shift, and go to state 27
    '{'            shift, and go to state 28

    structdef   go to state 29
    structcont  go to state 30
    basetype    go to state 31
    function    go to state 32
    identdecl   go to state 33
    block       go to state 34
    blockbody   go to state 35
    statement   go to state 36
    vardecl     go to state 37
    while       go to state 38
    ifelse      go to state 39
    return      go to state 40
    expr        go to state 41
    unop        go to state 42
    variable    go to state 43
    constant    go to state 44
    allocator   go to state 45
    call        go to state 46
    exprs       go to state 47


state 2

    0 $accept: program $end .

    $default  accept


state 3

    4 program: program error . '}'
    5        | program error . ';'

    '}'  shift, and go to state 48
    ';'  shift, and go to state 49


state 4

   48 expr: IDENT .

    $default  reduce using rule 48 (expr)


state 5

   49 expr: NUMBER .

    $default  reduce using rule 49 (expr)


state 6

   12 basetype: TOK_VOID .

    $default  reduce using rule 12 (basetype)


state 7

   13 basetype: TOK_INT .

    $default  reduce using rule 13 (basetype)


state 8

   14 basetype: TOK_STRING .

    $default  reduce using rule 14 (basetype)


state 9

   37 ifelse: TOK_IF . '(' expr ')' statement
   38       | TOK_IF . '(' expr ')' statement TOK_ELSE statement

    '('  shift, and go to state 50


state 10

   36 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 51


state 11

   39 return: TOK_RETURN . expr ';'
   40       | TOK_RETURN . ';'

    IDENT          shift, and go to state 4
    NUMBER         shift, and go to state 5
    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_ORD        shift, and go to state 17
    TOK_CHR        shift, and go to state 18
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 20
    TOK_CHARCON    shift, and go to state 21
    TOK_STRINGCON  shift, and go to state 22
    TOK_POS        shift, and go to state 23
    TOK_NEG        shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26
    ';'            shift, and go to state 53

    expr       go to state 54
    unop       go to state 42
    variable   go to state 43
    constant   go to state 44
    allocator  go to state 45
    call       go to state 46
    exprs      go to state 47


state 12

    9 structcont: TOK_STRUCT . TOK_IDENT '{'

    TOK_IDENT  shift, and go to state 55


state 13

   74 constant: TOK_FALSE .

    $default  reduce using rule 74 (constant)


state 14

   75 constant: TOK_TRUE .

    $default  reduce using rule 75 (constant)


state 15

   76 constant: TOK_NULL .

    $default  reduce using rule 76 (constant)


state 16

   65 unop: TOK_NEW .
   77 allocator: TOK_NEW . TOK_IDENT '(' ')'
   78          | TOK_NEW . TOK_STRING '(' expr ')'
   79          | TOK_NEW . basetype '[' expr ']'

    TOK_VOID    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 56
    TOK_IDENT   shift, and go to state 57

    TOK_IDENT  [reduce using rule 65 (unop)]
    $default   reduce using rule 65 (unop)

    basetype  go to state 58


state 17

   66 unop: TOK_ORD .

    $default  reduce using rule 66 (unop)


state 18

   67 unop: TOK_CHR .

    $default  reduce using rule 67 (unop)


state 19

   15 basetype: TOK_IDENT .
   68 variable: TOK_IDENT .
   80 call: TOK_IDENT . '(' ')'
   82 exprs: TOK_IDENT . '(' expr

    '('  shift, and go to state 59

    TOK_ARRAY  reduce using rule 15 (basetype)
    TOK_IDENT  reduce using rule 15 (basetype)
    $default   reduce using rule 68 (variable)


state 20

   71 constant: TOK_INTCON .

    $default  reduce using rule 71 (constant)


state 21

   72 constant: TOK_CHARCON .

    $default  reduce using rule 72 (constant)


state 22

   73 constant: TOK_STRINGCON .

    $default  reduce using rule 73 (constant)


state 23

   62 unop: TOK_POS .

    $default  reduce using rule 62 (unop)


state 24

   63 unop: TOK_NEG .

    $default  reduce using rule 63 (unop)


state 25

   64 unop: '!' .

    $default  reduce using rule 64 (unop)


state 26

   45 expr: '(' . expr ')'

    IDENT          shift, and go to state 4
    NUMBER         shift, and go to state 5
    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_ORD        shift, and go to state 17
    TOK_CHR        shift, and go to state 18
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 20
    TOK_CHARCON    shift, and go to state 21
    TOK_STRINGCON  shift, and go to state 22
    TOK_POS        shift, and go to state 23
    TOK_NEG        shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 60
    unop       go to state 42
    variable   go to state 43
    constant   go to state 44
    allocator  go to state 45
    call       go to state 46
    exprs      go to state 47


state 27

   25 block: ';' .

    $default  reduce using rule 25 (block)


state 28

   27 blockbody: '{' . statement
   28          | '{' .

    IDENT          shift, and go to state 4
    NUMBER         shift, and go to state 5
    TOK_VOID       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_ORD        shift, and go to state 17
    TOK_CHR        shift, and go to state 18
    TOK_IDENT      shift, and go to state 19
    TOK_INTCON     shift, and go to state 20
    TOK_CHARCON    shift, and go to state 21
    TOK_STRINGCON  shift, and go to state 22
    TOK_POS        shift, and go to state 23
    TOK_NEG        shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26
    ';'            shift, and go to state 27
    '{'            shift, and go to state 28

    IDENT          [reduce using rule 28 (blockbody)]
    NUMBER         [reduce using rule 28 (blockbody)]
    TOK_VOID       [reduce using rule 28 (blockbody)]
    TOK_INT        [reduce using rule 28 (blockbody)]
    TOK_STRING     [reduce using rule 28 (blockbody)]
    TOK_IF         [reduce using rule 28 (blockbody)]
    TOK_WHILE      [reduce using rule 28 (blockbody)]
    TOK_RETURN     [reduce using rule 28 (blockbody)]
    TOK_FALSE      [reduce using rule 28 (blockbody)]
    TOK_TRUE       [reduce using rule 28 (blockbody)]
    TOK_NULL       [reduce using rule 28 (blockbody)]
    TOK_NEW        [reduce using rule 28 (blockbody)]
    TOK_ORD        [reduce using rule 28 (blockbody)]
    TOK_CHR        [reduce using rule 28 (blockbody)]
    TOK_IDENT      [reduce using rule 28 (blockbody)]
    TOK_INTCON     [reduce using rule 28 (blockbody)]
    TOK_CHARCON    [reduce using rule 28 (blockbody)]
    TOK_STRINGCON  [reduce using rule 28 (blockbody)]
    TOK_POS        [reduce using rule 28 (blockbody)]
    TOK_NEG        [reduce using rule 28 (blockbody)]
    '!'            [reduce using rule 28 (blockbody)]
    '('            [reduce using rule 28 (blockbody)]
    ';'            [reduce using rule 28 (blockbody)]
    '{'            [reduce using rule 28 (blockbody)]
    $default       reduce using rule 28 (blockbody)

    basetype   go to state 31
    identdecl  go to state 61
    block      go to state 34
    blockbody  go to state 35
    statement  go to state 62
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    unop       go to state 42
    variable   go to state 43
    constant   go to state 44
    allocator  go to state 45
    call       go to state 46
    exprs      go to state 47


state 29

    1 program: program structdef .

    $default  reduce using rule 1 (program)


state 30

    7 structdef: structcont . '}'
    8 structcont: structcont . fielddecl ';'

    TOK_VOID    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 63
    '}'         shift, and go to state 64

    fielddecl  go to state 65
    basetype   go to state 66


state 31

   22 identdecl: basetype . TOK_IDENT
   23          | basetype . TOK_ARRAY TOK_IDENT

    TOK_ARRAY  shift, and go to state 67
    TOK_IDENT  shift, and go to state 68


state 32

    2 program: program function .

    $default  reduce using rule 2 (program)


state 33

   16 function: identdecl . funcargs ')' block
   17         | identdecl . funcargs ')' ';'
   18         | identdecl . '(' ')' block
   19         | identdecl . '(' ')' ';'
   35 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 69
    '('  shift, and go to state 70

    funcargs  go to state 71


state 34

   29 statement: block .

    $default  reduce using rule 29 (statement)


state 35

   24 block: blockbody . '}'
   26 blockbody: blockbody . statement

    IDENT          shift, and go to state 4
    NUMBER         shift, and go to state 5
    TOK_VOID       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_ORD        shift, and go to state 17
    TOK_CHR        shift, and go to state 18
    TOK_IDENT      shift, and go to state 19
    TOK_INTCON     shift, and go to state 20
    TOK_CHARCON    shift, and go to state 21
    TOK_STRINGCON  shift, and go to state 22
    TOK_POS        shift, and go to state 23
    TOK_NEG        shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26
    '}'            shift, and go to state 72
    ';'            shift, and go to state 27
    '{'            shift, and go to state 28

    basetype   go to state 31
    identdecl  go to state 61
    block      go to state 34
    blockbody  go to state 35
    statement  go to state 73
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    unop       go to state 42
    variable   go to state 43
    constant   go to state 44
    allocator  go to state 45
    call       go to state 46
    exprs      go to state 47


state 36

    3 program: program statement .

    $default  reduce using rule 3 (program)


state 37

   30 statement: vardecl .

    $default  reduce using rule 30 (statement)


state 38

   31 statement: while .

    $default  reduce using rule 31 (statement)


state 39

   32 statement: ifelse .

    $default  reduce using rule 32 (statement)


state 40

   33 statement: return .

    $default  reduce using rule 33 (statement)


state 41

   34 statement: expr . ';'
   41 expr: expr . binop expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 74
    TOK_NE  shift, and go to state 75
    TOK_LE  shift, and go to state 76
    TOK_GE  shift, and go to state 77
    '='     shift, and go to state 78
    TOK_GT  shift, and go to state 79
    TOK_LT  shift, and go to state 80
    '+'     shift, and go to state 81
    '-'     shift, and go to state 82
    '*'     shift, and go to state 83
    '/'     shift, and go to state 84
    '^'     shift, and go to state 85
    '['     shift, and go to state 86
    '.'     shift, and go to state 87
    ';'     shift, and go to state 88

    binop  go to state 89


state 42

   42 expr: unop . expr

    IDENT          shift, and go to state 4
    NUMBER         shift, and go to state 5
    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_ORD        shift, and go to state 17
    TOK_CHR        shift, and go to state 18
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 20
    TOK_CHARCON    shift, and go to state 21
    TOK_STRINGCON  shift, and go to state 22
    TOK_POS        shift, and go to state 23
    TOK_NEG        shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 90
    unop       go to state 42
    variable   go to state 43
    constant   go to state 44
    allocator  go to state 45
    call       go to state 46
    exprs      go to state 47


state 43

   46 expr: variable .

    $default  reduce using rule 46 (expr)


state 44

   47 expr: constant .

    $default  reduce using rule 47 (expr)


state 45

   43 expr: allocator .

    $default  reduce using rule 43 (expr)


state 46

   44 expr: call .

    $default  reduce using rule 44 (expr)


state 47

   81 call: exprs . ')'
   83 exprs: exprs . ',' expr

    ')'  shift, and go to state 91
    ','  shift, and go to state 92


state 48

    4 program: program error '}' .

    $default  reduce using rule 4 (program)


state 49

    5 program: program error ';' .

    $default  reduce using rule 5 (program)


state 50

   37 ifelse: TOK_IF '(' . expr ')' statement
   38       | TOK_IF '(' . expr ')' statement TOK_ELSE statement

    IDENT          shift, and go to state 4
    NUMBER         shift, and go to state 5
    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_ORD        shift, and go to state 17
    TOK_CHR        shift, and go to state 18
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 20
    TOK_CHARCON    shift, and go to state 21
    TOK_STRINGCON  shift, and go to state 22
    TOK_POS        shift, and go to state 23
    TOK_NEG        shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 93
    unop       go to state 42
    variable   go to state 43
    constant   go to state 44
    allocator  go to state 45
    call       go to state 46
    exprs      go to state 47


state 51

   36 while: TOK_WHILE '(' . expr ')' statement

    IDENT          shift, and go to state 4
    NUMBER         shift, and go to state 5
    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_ORD        shift, and go to state 17
    TOK_CHR        shift, and go to state 18
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 20
    TOK_CHARCON    shift, and go to state 21
    TOK_STRINGCON  shift, and go to state 22
    TOK_POS        shift, and go to state 23
    TOK_NEG        shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 94
    unop       go to state 42
    variable   go to state 43
    constant   go to state 44
    allocator  go to state 45
    call       go to state 46
    exprs      go to state 47


state 52

   68 variable: TOK_IDENT .
   80 call: TOK_IDENT . '(' ')'
   82 exprs: TOK_IDENT . '(' expr

    '('  shift, and go to state 59

    $default  reduce using rule 68 (variable)


state 53

   40 return: TOK_RETURN ';' .

    $default  reduce using rule 40 (return)


state 54

   39 return: TOK_RETURN expr . ';'
   41 expr: expr . binop expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 74
    TOK_NE  shift, and go to state 75
    TOK_LE  shift, and go to state 76
    TOK_GE  shift, and go to state 77
    '='     shift, and go to state 78
    TOK_GT  shift, and go to state 79
    TOK_LT  shift, and go to state 80
    '+'     shift, and go to state 81
    '-'     shift, and go to state 82
    '*'     shift, and go to state 83
    '/'     shift, and go to state 84
    '^'     shift, and go to state 85
    '['     shift, and go to state 86
    '.'     shift, and go to state 87
    ';'     shift, and go to state 95

    binop  go to state 89


state 55

    9 structcont: TOK_STRUCT TOK_IDENT . '{'

    '{'  shift, and go to state 96


state 56

   14 basetype: TOK_STRING .
   78 allocator: TOK_NEW TOK_STRING . '(' expr ')'

    '('  shift, and go to state 97

    $default  reduce using rule 14 (basetype)


state 57

   15 basetype: TOK_IDENT .
   77 allocator: TOK_NEW TOK_IDENT . '(' ')'

    '('  shift, and go to state 98

    $default  reduce using rule 15 (basetype)


state 58

   79 allocator: TOK_NEW basetype . '[' expr ']'

    '['  shift, and go to state 99


state 59

   80 call: TOK_IDENT '(' . ')'
   82 exprs: TOK_IDENT '(' . expr

    IDENT          shift, and go to state 4
    NUMBER         shift, and go to state 5
    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_ORD        shift, and go to state 17
    TOK_CHR        shift, and go to state 18
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 20
    TOK_CHARCON    shift, and go to state 21
    TOK_STRINGCON  shift, and go to state 22
    TOK_POS        shift, and go to state 23
    TOK_NEG        shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26
    ')'            shift, and go to state 100

    expr       go to state 101
    unop       go to state 42
    variable   go to state 43
    constant   go to state 44
    allocator  go to state 45
    call       go to state 46
    exprs      go to state 47


state 60

   41 expr: expr . binop expr
   45     | '(' expr . ')'
   69 variable: expr . '[' expr ']'
   70         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 74
    TOK_NE  shift, and go to state 75
    TOK_LE  shift, and go to state 76
    TOK_GE  shift, and go to state 77
    '='     shift, and go to state 78
    TOK_GT  shift, and go to state 79
    TOK_LT  shift, and go to state 80
    '+'     shift, and go to state 81
    '-'     shift, and go to state 82
    '*'     shift, and go to state 83
    '/'     shift, and go to state 84
    '^'     shift, and go to state 85
    '['     shift, and go to state 86
    '.'     shift, and go to state 87
    ')'     shift, and go to state 102

    binop  go to state 89


state 61

   35 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 69


state 62

   27 blockbody: '{' statement .

    $default  reduce using rule 27 (blockbody)


state 63

   15 basetype: TOK_IDENT .

    $default  reduce using rule 15 (basetype)


state 64

    7 structdef: structcont '}' .

    $default  reduce using rule 7 (structdef)


state 65

    8 structcont: structcont fielddecl . ';'

    ';'  shift, and go to state 103


state 66

   10 fielddecl: basetype . TOK_IDENT
   11          | basetype . TOK_ARRAY TOK_IDENT

    TOK_ARRAY  shift, and go to state 104
    TOK_IDENT  shift, and go to state 105


state 67

   23 identdecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 106


state 68

   22 identdecl: basetype TOK_IDENT .

    $default  reduce using rule 22 (identdecl)


state 69

   35 vardecl: identdecl '=' . expr ';'

    IDENT          shift, and go to state 4
    NUMBER         shift, and go to state 5
    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_ORD        shift, and go to state 17
    TOK_CHR        shift, and go to state 18
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 20
    TOK_CHARCON    shift, and go to state 21
    TOK_STRINGCON  shift, and go to state 22
    TOK_POS        shift, and go to state 23
    TOK_NEG        shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 107
    unop       go to state 42
    variable   go to state 43
    constant   go to state 44
    allocator  go to state 45
    call       go to state 46
    exprs      go to state 47


state 70

   18 function: identdecl '(' . ')' block
   19         | identdecl '(' . ')' ';'
   21 funcargs: '(' . identdecl

    TOK_VOID    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 63
    ')'         shift, and go to state 108

    basetype   go to state 31
    identdecl  go to state 109


state 71

   16 function: identdecl funcargs . ')' block
   17         | identdecl funcargs . ')' ';'
   20 funcargs: funcargs . ',' identdecl

    ')'  shift, and go to state 110
    ','  shift, and go to state 111


state 72

   24 block: blockbody '}' .

    $default  reduce using rule 24 (block)


state 73

   26 blockbody: blockbody statement .

    $default  reduce using rule 26 (blockbody)


state 74

   50 binop: TOK_EQ .

    $default  reduce using rule 50 (binop)


state 75

   51 binop: TOK_NE .

    $default  reduce using rule 51 (binop)


state 76

   53 binop: TOK_LE .

    $default  reduce using rule 53 (binop)


state 77

   55 binop: TOK_GE .

    $default  reduce using rule 55 (binop)


state 78

   60 binop: '=' .

    $default  reduce using rule 60 (binop)


state 79

   54 binop: TOK_GT .

    $default  reduce using rule 54 (binop)


state 80

   52 binop: TOK_LT .

    $default  reduce using rule 52 (binop)


state 81

   56 binop: '+' .

    $default  reduce using rule 56 (binop)


state 82

   57 binop: '-' .

    $default  reduce using rule 57 (binop)


state 83

   58 binop: '*' .

    $default  reduce using rule 58 (binop)


state 84

   59 binop: '/' .

    $default  reduce using rule 59 (binop)


state 85

   61 binop: '^' .

    $default  reduce using rule 61 (binop)


state 86

   69 variable: expr '[' . expr ']'

    IDENT          shift, and go to state 4
    NUMBER         shift, and go to state 5
    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_ORD        shift, and go to state 17
    TOK_CHR        shift, and go to state 18
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 20
    TOK_CHARCON    shift, and go to state 21
    TOK_STRINGCON  shift, and go to state 22
    TOK_POS        shift, and go to state 23
    TOK_NEG        shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 112
    unop       go to state 42
    variable   go to state 43
    constant   go to state 44
    allocator  go to state 45
    call       go to state 46
    exprs      go to state 47


state 87

   70 variable: expr '.' . TOK_IDENT

    TOK_IDENT  shift, and go to state 113


state 88

   34 statement: expr ';' .

    $default  reduce using rule 34 (statement)


state 89

   41 expr: expr binop . expr

    IDENT          shift, and go to state 4
    NUMBER         shift, and go to state 5
    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_ORD        shift, and go to state 17
    TOK_CHR        shift, and go to state 18
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 20
    TOK_CHARCON    shift, and go to state 21
    TOK_STRINGCON  shift, and go to state 22
    TOK_POS        shift, and go to state 23
    TOK_NEG        shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 114
    unop       go to state 42
    variable   go to state 43
    constant   go to state 44
    allocator  go to state 45
    call       go to state 46
    exprs      go to state 47


state 90

   41 expr: expr . binop expr
   42     | unop expr .
   69 variable: expr . '[' expr ']'
   70         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 74
    TOK_NE  shift, and go to state 75
    TOK_LE  shift, and go to state 76
    TOK_GE  shift, and go to state 77
    '='     shift, and go to state 78
    TOK_GT  shift, and go to state 79
    TOK_LT  shift, and go to state 80
    '+'     shift, and go to state 81
    '-'     shift, and go to state 82
    '*'     shift, and go to state 83
    '/'     shift, and go to state 84
    '^'     shift, and go to state 85
    '['     shift, and go to state 86
    '.'     shift, and go to state 87

    TOK_EQ    [reduce using rule 42 (expr)]
    TOK_NE    [reduce using rule 42 (expr)]
    TOK_LE    [reduce using rule 42 (expr)]
    TOK_GE    [reduce using rule 42 (expr)]
    '='       [reduce using rule 42 (expr)]
    TOK_GT    [reduce using rule 42 (expr)]
    TOK_LT    [reduce using rule 42 (expr)]
    '+'       [reduce using rule 42 (expr)]
    '-'       [reduce using rule 42 (expr)]
    '*'       [reduce using rule 42 (expr)]
    '/'       [reduce using rule 42 (expr)]
    '^'       [reduce using rule 42 (expr)]
    '['       [reduce using rule 42 (expr)]
    '.'       [reduce using rule 42 (expr)]
    $default  reduce using rule 42 (expr)

    binop  go to state 89


state 91

   81 call: exprs ')' .

    $default  reduce using rule 81 (call)


state 92

   83 exprs: exprs ',' . expr

    IDENT          shift, and go to state 4
    NUMBER         shift, and go to state 5
    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_ORD        shift, and go to state 17
    TOK_CHR        shift, and go to state 18
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 20
    TOK_CHARCON    shift, and go to state 21
    TOK_STRINGCON  shift, and go to state 22
    TOK_POS        shift, and go to state 23
    TOK_NEG        shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 115
    unop       go to state 42
    variable   go to state 43
    constant   go to state 44
    allocator  go to state 45
    call       go to state 46
    exprs      go to state 47


state 93

   37 ifelse: TOK_IF '(' expr . ')' statement
   38       | TOK_IF '(' expr . ')' statement TOK_ELSE statement
   41 expr: expr . binop expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 74
    TOK_NE  shift, and go to state 75
    TOK_LE  shift, and go to state 76
    TOK_GE  shift, and go to state 77
    '='     shift, and go to state 78
    TOK_GT  shift, and go to state 79
    TOK_LT  shift, and go to state 80
    '+'     shift, and go to state 81
    '-'     shift, and go to state 82
    '*'     shift, and go to state 83
    '/'     shift, and go to state 84
    '^'     shift, and go to state 85
    '['     shift, and go to state 86
    '.'     shift, and go to state 87
    ')'     shift, and go to state 116

    binop  go to state 89


state 94

   36 while: TOK_WHILE '(' expr . ')' statement
   41 expr: expr . binop expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 74
    TOK_NE  shift, and go to state 75
    TOK_LE  shift, and go to state 76
    TOK_GE  shift, and go to state 77
    '='     shift, and go to state 78
    TOK_GT  shift, and go to state 79
    TOK_LT  shift, and go to state 80
    '+'     shift, and go to state 81
    '-'     shift, and go to state 82
    '*'     shift, and go to state 83
    '/'     shift, and go to state 84
    '^'     shift, and go to state 85
    '['     shift, and go to state 86
    '.'     shift, and go to state 87
    ')'     shift, and go to state 117

    binop  go to state 89


state 95

   39 return: TOK_RETURN expr ';' .

    $default  reduce using rule 39 (return)


state 96

    9 structcont: TOK_STRUCT TOK_IDENT '{' .

    $default  reduce using rule 9 (structcont)


state 97

   78 allocator: TOK_NEW TOK_STRING '(' . expr ')'

    IDENT          shift, and go to state 4
    NUMBER         shift, and go to state 5
    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_ORD        shift, and go to state 17
    TOK_CHR        shift, and go to state 18
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 20
    TOK_CHARCON    shift, and go to state 21
    TOK_STRINGCON  shift, and go to state 22
    TOK_POS        shift, and go to state 23
    TOK_NEG        shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 118
    unop       go to state 42
    variable   go to state 43
    constant   go to state 44
    allocator  go to state 45
    call       go to state 46
    exprs      go to state 47


state 98

   77 allocator: TOK_NEW TOK_IDENT '(' . ')'

    ')'  shift, and go to state 119


state 99

   79 allocator: TOK_NEW basetype '[' . expr ']'

    IDENT          shift, and go to state 4
    NUMBER         shift, and go to state 5
    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_ORD        shift, and go to state 17
    TOK_CHR        shift, and go to state 18
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 20
    TOK_CHARCON    shift, and go to state 21
    TOK_STRINGCON  shift, and go to state 22
    TOK_POS        shift, and go to state 23
    TOK_NEG        shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 120
    unop       go to state 42
    variable   go to state 43
    constant   go to state 44
    allocator  go to state 45
    call       go to state 46
    exprs      go to state 47


state 100

   80 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 80 (call)


state 101

   41 expr: expr . binop expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' TOK_IDENT
   82 exprs: TOK_IDENT '(' expr .

    TOK_EQ  shift, and go to state 74
    TOK_NE  shift, and go to state 75
    TOK_LE  shift, and go to state 76
    TOK_GE  shift, and go to state 77
    '='     shift, and go to state 78
    TOK_GT  shift, and go to state 79
    TOK_LT  shift, and go to state 80
    '+'     shift, and go to state 81
    '-'     shift, and go to state 82
    '*'     shift, and go to state 83
    '/'     shift, and go to state 84
    '^'     shift, and go to state 85
    '['     shift, and go to state 86
    '.'     shift, and go to state 87

    $default  reduce using rule 82 (exprs)

    binop  go to state 89


state 102

   45 expr: '(' expr ')' .

    $default  reduce using rule 45 (expr)


state 103

    8 structcont: structcont fielddecl ';' .

    $default  reduce using rule 8 (structcont)


state 104

   11 fielddecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 121


state 105

   10 fielddecl: basetype TOK_IDENT .

    $default  reduce using rule 10 (fielddecl)


state 106

   23 identdecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 23 (identdecl)


state 107

   35 vardecl: identdecl '=' expr . ';'
   41 expr: expr . binop expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 74
    TOK_NE  shift, and go to state 75
    TOK_LE  shift, and go to state 76
    TOK_GE  shift, and go to state 77
    '='     shift, and go to state 78
    TOK_GT  shift, and go to state 79
    TOK_LT  shift, and go to state 80
    '+'     shift, and go to state 81
    '-'     shift, and go to state 82
    '*'     shift, and go to state 83
    '/'     shift, and go to state 84
    '^'     shift, and go to state 85
    '['     shift, and go to state 86
    '.'     shift, and go to state 87
    ';'     shift, and go to state 122

    binop  go to state 89


state 108

   18 function: identdecl '(' ')' . block
   19         | identdecl '(' ')' . ';'

    ';'  shift, and go to state 123
    '{'  shift, and go to state 28

    block      go to state 124
    blockbody  go to state 35


state 109

   21 funcargs: '(' identdecl .

    $default  reduce using rule 21 (funcargs)


state 110

   16 function: identdecl funcargs ')' . block
   17         | identdecl funcargs ')' . ';'

    ';'  shift, and go to state 125
    '{'  shift, and go to state 28

    block      go to state 126
    blockbody  go to state 35


state 111

   20 funcargs: funcargs ',' . identdecl

    TOK_VOID    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 63

    basetype   go to state 31
    identdecl  go to state 127


state 112

   41 expr: expr . binop expr
   69 variable: expr . '[' expr ']'
   69         | expr '[' expr . ']'
   70         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 74
    TOK_NE  shift, and go to state 75
    TOK_LE  shift, and go to state 76
    TOK_GE  shift, and go to state 77
    '='     shift, and go to state 78
    TOK_GT  shift, and go to state 79
    TOK_LT  shift, and go to state 80
    '+'     shift, and go to state 81
    '-'     shift, and go to state 82
    '*'     shift, and go to state 83
    '/'     shift, and go to state 84
    '^'     shift, and go to state 85
    '['     shift, and go to state 86
    '.'     shift, and go to state 87
    ']'     shift, and go to state 128

    binop  go to state 89


state 113

   70 variable: expr '.' TOK_IDENT .

    $default  reduce using rule 70 (variable)


state 114

   41 expr: expr . binop expr
   41     | expr binop expr .
   69 variable: expr . '[' expr ']'
   70         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 74
    TOK_NE  shift, and go to state 75
    TOK_LE  shift, and go to state 76
    TOK_GE  shift, and go to state 77
    '='     shift, and go to state 78
    TOK_GT  shift, and go to state 79
    TOK_LT  shift, and go to state 80
    '+'     shift, and go to state 81
    '-'     shift, and go to state 82
    '*'     shift, and go to state 83
    '/'     shift, and go to state 84
    '^'     shift, and go to state 85
    '['     shift, and go to state 86
    '.'     shift, and go to state 87

    TOK_EQ    [reduce using rule 41 (expr)]
    TOK_NE    [reduce using rule 41 (expr)]
    TOK_LE    [reduce using rule 41 (expr)]
    TOK_GE    [reduce using rule 41 (expr)]
    '='       [reduce using rule 41 (expr)]
    TOK_GT    [reduce using rule 41 (expr)]
    TOK_LT    [reduce using rule 41 (expr)]
    '+'       [reduce using rule 41 (expr)]
    '-'       [reduce using rule 41 (expr)]
    '*'       [reduce using rule 41 (expr)]
    '/'       [reduce using rule 41 (expr)]
    '^'       [reduce using rule 41 (expr)]
    '['       [reduce using rule 41 (expr)]
    '.'       [reduce using rule 41 (expr)]
    $default  reduce using rule 41 (expr)

    binop  go to state 89


state 115

   41 expr: expr . binop expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' TOK_IDENT
   83 exprs: exprs ',' expr .

    TOK_EQ  shift, and go to state 74
    TOK_NE  shift, and go to state 75
    TOK_LE  shift, and go to state 76
    TOK_GE  shift, and go to state 77
    '='     shift, and go to state 78
    TOK_GT  shift, and go to state 79
    TOK_LT  shift, and go to state 80
    '+'     shift, and go to state 81
    '-'     shift, and go to state 82
    '*'     shift, and go to state 83
    '/'     shift, and go to state 84
    '^'     shift, and go to state 85
    '['     shift, and go to state 86
    '.'     shift, and go to state 87

    $default  reduce using rule 83 (exprs)

    binop  go to state 89


state 116

   37 ifelse: TOK_IF '(' expr ')' . statement
   38       | TOK_IF '(' expr ')' . statement TOK_ELSE statement

    IDENT          shift, and go to state 4
    NUMBER         shift, and go to state 5
    TOK_VOID       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_ORD        shift, and go to state 17
    TOK_CHR        shift, and go to state 18
    TOK_IDENT      shift, and go to state 19
    TOK_INTCON     shift, and go to state 20
    TOK_CHARCON    shift, and go to state 21
    TOK_STRINGCON  shift, and go to state 22
    TOK_POS        shift, and go to state 23
    TOK_NEG        shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26
    ';'            shift, and go to state 27
    '{'            shift, and go to state 28

    basetype   go to state 31
    identdecl  go to state 61
    block      go to state 34
    blockbody  go to state 35
    statement  go to state 129
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    unop       go to state 42
    variable   go to state 43
    constant   go to state 44
    allocator  go to state 45
    call       go to state 46
    exprs      go to state 47


state 117

   36 while: TOK_WHILE '(' expr ')' . statement

    IDENT          shift, and go to state 4
    NUMBER         shift, and go to state 5
    TOK_VOID       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_ORD        shift, and go to state 17
    TOK_CHR        shift, and go to state 18
    TOK_IDENT      shift, and go to state 19
    TOK_INTCON     shift, and go to state 20
    TOK_CHARCON    shift, and go to state 21
    TOK_STRINGCON  shift, and go to state 22
    TOK_POS        shift, and go to state 23
    TOK_NEG        shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26
    ';'            shift, and go to state 27
    '{'            shift, and go to state 28

    basetype   go to state 31
    identdecl  go to state 61
    block      go to state 34
    blockbody  go to state 35
    statement  go to state 130
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    unop       go to state 42
    variable   go to state 43
    constant   go to state 44
    allocator  go to state 45
    call       go to state 46
    exprs      go to state 47


state 118

   41 expr: expr . binop expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' TOK_IDENT
   78 allocator: TOK_NEW TOK_STRING '(' expr . ')'

    TOK_EQ  shift, and go to state 74
    TOK_NE  shift, and go to state 75
    TOK_LE  shift, and go to state 76
    TOK_GE  shift, and go to state 77
    '='     shift, and go to state 78
    TOK_GT  shift, and go to state 79
    TOK_LT  shift, and go to state 80
    '+'     shift, and go to state 81
    '-'     shift, and go to state 82
    '*'     shift, and go to state 83
    '/'     shift, and go to state 84
    '^'     shift, and go to state 85
    '['     shift, and go to state 86
    '.'     shift, and go to state 87
    ')'     shift, and go to state 131

    binop  go to state 89


state 119

   77 allocator: TOK_NEW TOK_IDENT '(' ')' .

    $default  reduce using rule 77 (allocator)


state 120

   41 expr: expr . binop expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' TOK_IDENT
   79 allocator: TOK_NEW basetype '[' expr . ']'

    TOK_EQ  shift, and go to state 74
    TOK_NE  shift, and go to state 75
    TOK_LE  shift, and go to state 76
    TOK_GE  shift, and go to state 77
    '='     shift, and go to state 78
    TOK_GT  shift, and go to state 79
    TOK_LT  shift, and go to state 80
    '+'     shift, and go to state 81
    '-'     shift, and go to state 82
    '*'     shift, and go to state 83
    '/'     shift, and go to state 84
    '^'     shift, and go to state 85
    '['     shift, and go to state 86
    '.'     shift, and go to state 87
    ']'     shift, and go to state 132

    binop  go to state 89


state 121

   11 fielddecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 11 (fielddecl)


state 122

   35 vardecl: identdecl '=' expr ';' .

    $default  reduce using rule 35 (vardecl)


state 123

   19 function: identdecl '(' ')' ';' .
   25 block: ';' .

    $end           reduce using rule 19 (function)
    $end           [reduce using rule 25 (block)]
    error          reduce using rule 19 (function)
    error          [reduce using rule 25 (block)]
    IDENT          reduce using rule 19 (function)
    IDENT          [reduce using rule 25 (block)]
    NUMBER         reduce using rule 19 (function)
    NUMBER         [reduce using rule 25 (block)]
    TOK_VOID       reduce using rule 19 (function)
    TOK_VOID       [reduce using rule 25 (block)]
    TOK_INT        reduce using rule 19 (function)
    TOK_INT        [reduce using rule 25 (block)]
    TOK_STRING     reduce using rule 19 (function)
    TOK_STRING     [reduce using rule 25 (block)]
    TOK_IF         reduce using rule 19 (function)
    TOK_IF         [reduce using rule 25 (block)]
    TOK_WHILE      reduce using rule 19 (function)
    TOK_WHILE      [reduce using rule 25 (block)]
    TOK_RETURN     reduce using rule 19 (function)
    TOK_RETURN     [reduce using rule 25 (block)]
    TOK_STRUCT     reduce using rule 19 (function)
    TOK_STRUCT     [reduce using rule 25 (block)]
    TOK_FALSE      reduce using rule 19 (function)
    TOK_FALSE      [reduce using rule 25 (block)]
    TOK_TRUE       reduce using rule 19 (function)
    TOK_TRUE       [reduce using rule 25 (block)]
    TOK_NULL       reduce using rule 19 (function)
    TOK_NULL       [reduce using rule 25 (block)]
    TOK_NEW        reduce using rule 19 (function)
    TOK_NEW        [reduce using rule 25 (block)]
    TOK_ORD        reduce using rule 19 (function)
    TOK_ORD        [reduce using rule 25 (block)]
    TOK_CHR        reduce using rule 19 (function)
    TOK_CHR        [reduce using rule 25 (block)]
    TOK_IDENT      reduce using rule 19 (function)
    TOK_IDENT      [reduce using rule 25 (block)]
    TOK_INTCON     reduce using rule 19 (function)
    TOK_INTCON     [reduce using rule 25 (block)]
    TOK_CHARCON    reduce using rule 19 (function)
    TOK_CHARCON    [reduce using rule 25 (block)]
    TOK_STRINGCON  reduce using rule 19 (function)
    TOK_STRINGCON  [reduce using rule 25 (block)]
    TOK_POS        reduce using rule 19 (function)
    TOK_POS        [reduce using rule 25 (block)]
    TOK_NEG        reduce using rule 19 (function)
    TOK_NEG        [reduce using rule 25 (block)]
    '!'            reduce using rule 19 (function)
    '!'            [reduce using rule 25 (block)]
    '('            reduce using rule 19 (function)
    '('            [reduce using rule 25 (block)]
    ';'            reduce using rule 19 (function)
    ';'            [reduce using rule 25 (block)]
    '{'            reduce using rule 19 (function)
    '{'            [reduce using rule 25 (block)]
    $default       reduce using rule 19 (function)


state 124

   18 function: identdecl '(' ')' block .

    $default  reduce using rule 18 (function)


state 125

   17 function: identdecl funcargs ')' ';' .
   25 block: ';' .

    $end           reduce using rule 17 (function)
    $end           [reduce using rule 25 (block)]
    error          reduce using rule 17 (function)
    error          [reduce using rule 25 (block)]
    IDENT          reduce using rule 17 (function)
    IDENT          [reduce using rule 25 (block)]
    NUMBER         reduce using rule 17 (function)
    NUMBER         [reduce using rule 25 (block)]
    TOK_VOID       reduce using rule 17 (function)
    TOK_VOID       [reduce using rule 25 (block)]
    TOK_INT        reduce using rule 17 (function)
    TOK_INT        [reduce using rule 25 (block)]
    TOK_STRING     reduce using rule 17 (function)
    TOK_STRING     [reduce using rule 25 (block)]
    TOK_IF         reduce using rule 17 (function)
    TOK_IF         [reduce using rule 25 (block)]
    TOK_WHILE      reduce using rule 17 (function)
    TOK_WHILE      [reduce using rule 25 (block)]
    TOK_RETURN     reduce using rule 17 (function)
    TOK_RETURN     [reduce using rule 25 (block)]
    TOK_STRUCT     reduce using rule 17 (function)
    TOK_STRUCT     [reduce using rule 25 (block)]
    TOK_FALSE      reduce using rule 17 (function)
    TOK_FALSE      [reduce using rule 25 (block)]
    TOK_TRUE       reduce using rule 17 (function)
    TOK_TRUE       [reduce using rule 25 (block)]
    TOK_NULL       reduce using rule 17 (function)
    TOK_NULL       [reduce using rule 25 (block)]
    TOK_NEW        reduce using rule 17 (function)
    TOK_NEW        [reduce using rule 25 (block)]
    TOK_ORD        reduce using rule 17 (function)
    TOK_ORD        [reduce using rule 25 (block)]
    TOK_CHR        reduce using rule 17 (function)
    TOK_CHR        [reduce using rule 25 (block)]
    TOK_IDENT      reduce using rule 17 (function)
    TOK_IDENT      [reduce using rule 25 (block)]
    TOK_INTCON     reduce using rule 17 (function)
    TOK_INTCON     [reduce using rule 25 (block)]
    TOK_CHARCON    reduce using rule 17 (function)
    TOK_CHARCON    [reduce using rule 25 (block)]
    TOK_STRINGCON  reduce using rule 17 (function)
    TOK_STRINGCON  [reduce using rule 25 (block)]
    TOK_POS        reduce using rule 17 (function)
    TOK_POS        [reduce using rule 25 (block)]
    TOK_NEG        reduce using rule 17 (function)
    TOK_NEG        [reduce using rule 25 (block)]
    '!'            reduce using rule 17 (function)
    '!'            [reduce using rule 25 (block)]
    '('            reduce using rule 17 (function)
    '('            [reduce using rule 25 (block)]
    ';'            reduce using rule 17 (function)
    ';'            [reduce using rule 25 (block)]
    '{'            reduce using rule 17 (function)
    '{'            [reduce using rule 25 (block)]
    $default       reduce using rule 17 (function)


state 126

   16 function: identdecl funcargs ')' block .

    $default  reduce using rule 16 (function)


state 127

   20 funcargs: funcargs ',' identdecl .

    $default  reduce using rule 20 (funcargs)


state 128

   69 variable: expr '[' expr ']' .

    $default  reduce using rule 69 (variable)


state 129

   37 ifelse: TOK_IF '(' expr ')' statement .
   38       | TOK_IF '(' expr ')' statement . TOK_ELSE statement

    TOK_ELSE  shift, and go to state 133

    TOK_ELSE  [reduce using rule 37 (ifelse)]
    $default  reduce using rule 37 (ifelse)


state 130

   36 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 36 (while)


state 131

   78 allocator: TOK_NEW TOK_STRING '(' expr ')' .

    $default  reduce using rule 78 (allocator)


state 132

   79 allocator: TOK_NEW basetype '[' expr ']' .

    $default  reduce using rule 79 (allocator)


state 133

   38 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE . statement

    IDENT          shift, and go to state 4
    NUMBER         shift, and go to state 5
    TOK_VOID       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_ORD        shift, and go to state 17
    TOK_CHR        shift, and go to state 18
    TOK_IDENT      shift, and go to state 19
    TOK_INTCON     shift, and go to state 20
    TOK_CHARCON    shift, and go to state 21
    TOK_STRINGCON  shift, and go to state 22
    TOK_POS        shift, and go to state 23
    TOK_NEG        shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26
    ';'            shift, and go to state 27
    '{'            shift, and go to state 28

    basetype   go to state 31
    identdecl  go to state 61
    block      go to state 34
    blockbody  go to state 35
    statement  go to state 134
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    unop       go to state 42
    variable   go to state 43
    constant   go to state 44
    allocator  go to state 45
    call       go to state 46
    exprs      go to state 47


state 134

   38 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement .

    $default  reduce using rule 38 (ifelse)
