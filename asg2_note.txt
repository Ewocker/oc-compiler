asg2_note.txt:

files:
	astree.cpp/h
	lyutils.cpp/h
	parser.y			}
	scanner.L (I write)	}	dummy comipler
	-----------
	main.cpp(edit)	create .tok as .str
	and all old files


files generated by your scanner.L

yylex.cc
yylex.output
yyparse.cc
yyparse.h



1.main.cpp:
1)	pipeopen

2)	create	.tok file

3)	open	.tok

4)	parse error : yyparse() in ex8

5)	dump .tok : no function provided (do it yourself)
	for(ii){
		yylex()
		yyEOF
	}

6)	close .tok
	close pipe

7)	yylex-destroy() at the end of main   see ex.8





scanner.L:

%option--}
---------}	copy
---------}

2. 
define Macro Regular Expression	(ex.8)
	LETTER			[A-Za-z]
	DIGIT			[0-9]
	CHARCON			[]
	INTCON			[]
	IDENT 			[{LETTER}{LETTER}{DIGIT}*]
	INVALIDIDENT	[]


3.
%% ----> Start Program

4.
see parser.y   yylval-token is a function in lyutils.cpp
"[]"		return yylval-token(TOK_ARRAY)
"void"		return TOK_VOID
"+"			return yylval-token('+')

5.
%% ----> End Program


Makefile pdf.
	LSOURCES: 	scanner.L
	YSOURCES: 	parser.y
	CLGEN	: 	yylex.cc
	CYGEN	:	yyparse.cc


mk.build generates:
	yylex.cc
	yyparse.cc
	yylex.output
	yyparse.output


BISON:
	bison - defines

	compile
	flex - define scanner	}
	bison- define parser 	} add to Makefile

then run mk.tests (check .tok file)

***
turn on debugflag in main
	(yy_flex_debug = 1)	}
	(yydebug = 1)		}

In a NutShell:
	(you should write)
	main.cpp
	scanner.L
	Makefile


yylval in ex.8	自己寫
yylex() generate ....有的沒的